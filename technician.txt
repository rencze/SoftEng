

// "use client";

// import { useState, useEffect } from "react";
// import axios from "axios";
// import moment from "moment";
// import { FaTrash, FaTimes, FaSearch, FaCalendarAlt, FaClock, FaBan, FaCheckCircle } from "react-icons/fa";

// const API_URL = "http://localhost:3001/api/slot-dates";
// const SLOT_API_BASE = "http://localhost:3001/api/slot-dates";
// const BOOKING_API = "http://localhost:3001/api/bookings";

// export default function ScheduleManagementPage() {
//   const [schedules, setSchedules] = useState([]);
//   const [search, setSearch] = useState("");
//   const [isModalOpen, setIsModalOpen] = useState(false);
//   const [modalType, setModalType] = useState(""); // "day" or "time"
//   const [loading, setLoading] = useState(false);

//   // Calendar states
//   const [currentDate, setCurrentDate] = useState(new Date());
//   const [selectedDate, setSelectedDate] = useState(null);
//   const [selectedDates, setSelectedDates] = useState([]);
//   const [multipleDay, setMultipleDay] = useState(false);

//   // Time slot states
//   const [period, setPeriod] = useState("AM");
//   const [selectedHour, setSelectedHour] = useState(null);
//   const [selectedTimes, setSelectedTimes] = useState([]);
//   const [multipleTime, setMultipleTime] = useState(false);

//   const [slots, setSlots] = useState({ AM: [], PM: [] });
//   const [loadingSlots, setLoadingSlots] = useState(false);
//   const [blockedDays, setBlockedDays] = useState([]);

// const [technicians, setTechnicians] = useState([]);
// const [selectedTechnicians, setSelectedTechnicians] = useState([]);
// const [loadingTechnicians, setLoadingTechnicians] = useState(false);


//     // Fetch available technicians for a specific date and time slot
// const fetchAvailableTechnicians = async (date, timeSlotId) => {
//   try {
//     const response = await axios.get(`${BOOKING_API}/availability`, {
//       params: { date: moment(date).format("YYYY-MM-DD"), timeSlotId }
//     });
//     return response.data;
//   } catch (err) {
//     console.error("Error fetching technicians:", err);
//     return [];
//   }
// };

// // Block/Unblock technician using your existing endpoints
// const blockTechnician = async (technicianId, timeSlotId) => {
//   try {
//     await axios.post(`${BOOKING_API}/technicians/block`, {
//       technicianId,
//       timeSlotId
//     });
//   } catch (err) {
//     console.error("Error blocking technician:", err);
//     throw err;
//   }
// };

// const unblockTechnician = async (technicianId, timeSlotId) => {
//   try {
//     await axios.post(`${BOOKING_API}/technicians/unblock`, {
//       technicianId,
//       timeSlotId
//     });
//   } catch (err) {
//     console.error("Error unblocking technician:", err);
//     throw err;
//   }
// };

// // Bulk block/unblock - using your bulkBlockTechnician endpoint
// const bulkBlockTechnicians = async (technicianIds, date, timeSlotIds, isAvailable) => {
//   try {
//     const promises = technicianIds.map(technicianId => 
//       axios.post(`${BOOKING_API}/bulk-block`, {
//         technicianId,
//         date: date ? moment(date).format("YYYY-MM-DD") : undefined,
//         timeSlotIds: timeSlotIds && timeSlotIds.length > 0 ? timeSlotIds : undefined,
//         isAvailable
//       })
//     );
    
//     await Promise.all(promises);
//   } catch (err) {
//     console.error("Error bulk blocking technicians:", err);
//     throw err;
//   }
// };


//   // Initialize data
//   useEffect(() => {
//     fetchSchedules();
//   }, []);

//   // Data fetching functions
//   const fetchSchedules = async () => {
//     try {
//       setLoading(true);
//       const res = await axios.get(API_URL);
//       setSchedules(res.data);
//     } catch (err) {
//       console.error("Error fetching schedules:", err);
//       alert("Failed to load schedules");
//     } finally {
//       setLoading(false);
//     }
//   };

//   const fetchSlots = async (date) => {
//     if (!date) return;
    
//     setLoadingSlots(true);
//     const formattedDate = moment(date).format("YYYY-MM-DD");
    
//     try {
//       const response = await fetch(`${SLOT_API_BASE}/slots/${formattedDate}`);
//       if (!response.ok) throw new Error("Failed to fetch slots");
      
//       const data = await response.json();
//       const AM = data.filter(slot => parseInt(slot.startTime.split(":")[0]) < 12);
//       const PM = data.filter(slot => parseInt(slot.startTime.split(":")[0]) >= 12);

//       setSlots({ AM, PM });
//       setSelectedHour(null);
//       setSelectedTimes([]);

//       // Check if the entire day is blocked
//       const dayStatusResponse = await axios.get(`${SLOT_API_BASE}/date/${formattedDate}`).catch(() => null);
//       if (dayStatusResponse?.data) {
//         setBlockedDays(prev => {
//           const filtered = prev.filter(d => !moment(d).isSame(date, 'day'));
//           return dayStatusResponse.data.isOpen === false 
//             ? [...filtered, date] 
//             : filtered;
//         });
//       }
//     } catch (err) {
//       console.error("Error fetching slots:", err);
//       setSlots({ AM: [], PM: [] });
//     } finally {
//       setLoadingSlots(false);
//     }
//   };

//   // Modal management
//   const openModal = (type) => {
//     setModalType(type);
//     setIsModalOpen(true);
//     resetSelection();
//   };

//   const closeModal = () => {
//     setIsModalOpen(false);
//     setModalType("");
//     resetSelection();
//   };

//   const resetSelection = () => {
//     setSelectedDate(null);
//     setSelectedDates([]);
//     setSelectedHour(null);
//     setSelectedTimes([]);
//     setSlots({ AM: [], PM: [] });
//     setMultipleDay(false);
//     setMultipleTime(false);
//     setBlockedDays([]);
//   };

//   // Schedule operations
//   const deleteSchedule = async (schedule) => {
//     if (!confirm("Are you sure you want to delete this schedule?")) return;
    
//     try {
//       await axios.delete(`${API_URL}/${schedule.id}`);
//       fetchSchedules();
//     } catch (err) {
//       console.error("Error deleting schedule:", err);
//       alert("Failed to delete schedule");
//     }
//   };

//   // Block/Unblock operations
//   const handleDayOperation = async (isBlock) => {
//     try {
//       const targetDates = multipleDay ? selectedDates : [selectedDate];
//       if (!targetDates.length) {
//         alert("Please select at least one date.");
//         return;
//       }

//       for (const date of targetDates) {
//         const formatted = moment(date).format("YYYY-MM-DD");
//         const slotRes = await axios.get(`${SLOT_API_BASE}/date/${formatted}`).catch(() => null);

//         if (slotRes?.data?.slotDateId) {
//         await axios.patch(`${SLOT_API_BASE}/cascade/${slotRes.data.slotDateId}`, { isOpen: !isBlock });

//         } else {
//           await axios.post(SLOT_API_BASE, { slotDate: formatted, isOpen: !isBlock });
//         }

//         // Update blocked days state
//         setBlockedDays(prev => {
//           const filtered = prev.filter(d => !moment(d).isSame(date, 'day'));
//           return isBlock ? [...filtered, date] : filtered;
//         });
//       }

//       alert(`Day(s) successfully ${isBlock ? 'blocked' : 'unblocked'}.`);
//       if (selectedDate) fetchSlots(selectedDate);
//     } catch (err) {
//       console.error(err);
//       alert(`Failed to ${isBlock ? 'block' : 'unblock'} day(s).`);
//     }
//   };

//   const handleTimeOperation = async (isBlock) => {
//     try {
//       if (!selectedDate) {
//         alert("Select a date first.");
//         return;
//       }

//       const times = multipleTime ? selectedTimes : [selectedHour];
//       if (!times.length) {
//         alert("Please select at least one time.");
//         return;
//       }

//       const formattedDate = moment(selectedDate).format("YYYY-MM-DD");
      
//       // Find or create slot date
//       let slotRes = await axios.get(`${SLOT_API_BASE}/date/${formattedDate}`).catch(() => null);
//       if (!slotRes?.data?.slotDateId) {
//         const createRes = await axios.post(SLOT_API_BASE, { slotDate: formattedDate, isOpen: true });
//         slotRes = { data: { slotDateId: createRes.data.slotDateId } };
//       }

//       const slotDateId = slotRes.data.slotDateId;
//       const response = await axios.get(`${SLOT_API_BASE}/${slotDateId}/time-slots`);
//       const timeSlots = response.data;

//       for (const time of times) {
//         const [start] = time.split(" - ");
//         const slot = timeSlots.find(t => 
//           formatTime12h(t.startTime) === start.trim()
//         );
        
//         if (slot) {
//           await axios.patch(`${SLOT_API_BASE}/time-slot/${slot.timeSlotId}`, { 
//             isAvailable: !isBlock 
//           });
//         }
//       }

//       alert(`Time slot(s) successfully ${isBlock ? 'blocked' : 'unblocked'}.`);
//       fetchSlots(selectedDate);
//     } catch (err) {
//       console.error(err);
//       alert(`Failed to ${isBlock ? 'block' : 'unblock'} time(s).`);
//     }
//   };

//   // Calendar helpers
//   const getDaysInMonth = () => {
//     const start = moment(currentDate).startOf("month");
//     const end = moment(currentDate).endOf("month");
//     const days = [];

//     // Previous month days
//     const startDay = start.day();
//     for (let i = 0; i < startDay; i++) {
//       days.push({
//         date: start.clone().subtract(startDay - i, "days").toDate(),
//         outside: true,
//       });
//     }

//     // Current month days
//     for (let i = 1; i <= end.date(); i++) {
//       days.push({ date: moment(currentDate).date(i).toDate(), outside: false });
//     }

//     // Next month days
//     while (days.length < 42) {
//       days.push({ date: end.add(1, "day").toDate(), outside: true });
//     }

//     return days;
//   };

//   const navigateMonth = (direction) => {
//     const newDate = moment(currentDate)
//       .add(direction === "next" ? 1 : -1, "month")
//       .toDate();
//     setCurrentDate(newDate);
//   };

//   const formatTime12h = (time) => {
//     const [hour, minute] = time.split(":").map(Number);
//     const h = hour % 12 === 0 ? 12 : hour % 12;
//     const period = hour >= 12 ? "PM" : "AM";
//     return `${h}:${minute.toString().padStart(2, "0")} ${period}`;
//   };

//   // Check if a day is blocked
//   const isDayBlocked = (date) => {
//     return blockedDays.some(blockedDate => moment(blockedDate).isSame(date, 'day'));
//   };

//   // Selection handlers
//   const handleDateSelect = (date) => {
//     if (multipleDay) {
//       setSelectedDates(prev => {
//         const exists = prev.some(d => moment(d).isSame(date, "day"));
//         return exists
//           ? prev.filter(d => !moment(d).isSame(date, "day"))
//           : [...prev, date];
//       });
//     } else {
//       setSelectedDate(date);
//     }
//     fetchSlots(date);
//   };

//   const handleTimeSelect = (time, isBlocked) => {
//     if (multipleTime) {
//       setSelectedTimes(prev =>
//         prev.includes(time)
//           ? prev.filter(t => t !== time)
//           : [...prev, time]
//       );
//     } else {
//       setSelectedHour(time);
//     }
//   };

//   // Filter schedules
//   const filteredSchedules = schedules.filter(schedule =>
//     schedule.reason?.toLowerCase().includes(search.toLowerCase())
//   );

//   // Calendar data
//   const days = getDaysInMonth();
//   const monthYear = moment(currentDate).format("MMMM YYYY");
//   const weekDays = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];

//   return (
//     <div className="min-h-screen bg-gradient-to-br from-gray-50 to-gray-100 p-6">
//       {/* Header */}
//       <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center mb-8 gap-4">
//         <div>
//           <h1 className="text-3xl font-bold text-gray-800">Schedule Management</h1>
//           <p className="text-gray-600 mt-1">Manage blocked schedules and availability</p>
//         </div>

//         <div className="flex flex-wrap gap-3">
//           <button
//             onClick={() => openModal("day")}
//             className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition shadow-sm"
//           >
//             <FaCalendarAlt className="text-sm" />
//             Update Schedule
//           </button>
//           <button
//             onClick={() => openModal("time")}
//             className="flex items-center gap-2 px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition shadow-sm"
//           >
//             <FaClock className="text-sm" />
//             Update Techncinian Schedule
//           </button>
//         </div>
//       </div>

//       {/* Search */}
//       <div className="bg-white rounded-xl border p-4 mb-6 shadow-sm">
//         <div className="relative">
//           <FaSearch className="absolute left-3 top-3 text-gray-400" />
//           <input
//             type="text"
//             placeholder="Search by reason..."
//             value={search}
//             onChange={(e) => setSearch(e.target.value)}
//             className="w-full border rounded-lg pl-10 pr-4 py-2 focus:ring-2 focus:ring-blue-500 outline-none"
//           />
//         </div>
//       </div>

//       {/* Schedule Table */}
//       <div className="bg-white rounded-xl shadow-lg overflow-hidden">
//         {loading ? (
//           <div className="flex justify-center items-center py-12">
//             <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
//           </div>
//         ) : (
//           <table className="min-w-full divide-y divide-gray-200">
//             <thead className="bg-gray-50">
//               <tr>
//                 <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
//                   Date
//                 </th>
//                 <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
//                   Start Time
//                 </th>
//                 <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
//                   End Time
//                 </th>
//                 <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
//                   Reason
//                 </th>
//                 <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
//                   Status
//                 </th>
//                 <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
//                   Actions
//                 </th>
//               </tr>
//             </thead>
//             <tbody className="bg-white divide-y divide-gray-200">
//               {filteredSchedules.length > 0 ? (
//                 filteredSchedules.map((schedule) => (
//                   <tr key={schedule.id} className="hover:bg-gray-50 transition">
//                     <td className="px-6 py-4 whitespace-nowrap font-medium text-gray-900">
//                       {schedule.date}
//                     </td>
//                     <td className="px-6 py-4 whitespace-nowrap text-gray-600">
//                       {schedule.startTime}
//                     </td>
//                     <td className="px-6 py-4 whitespace-nowrap text-gray-600">
//                       {schedule.endTime}
//                     </td>
//                     <td className="px-6 py-4 text-gray-600">
//                       {schedule.reason || "No reason provided"}
//                     </td>
//                     <td className="px-6 py-4 whitespace-nowrap">
//                       <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
//                         <FaBan className="mr-1" />
//                         Blocked
//                       </span>
//                     </td>
//                     <td className="px-6 py-4 whitespace-nowrap">
//                       <button
//                         onClick={() => deleteSchedule(schedule)}
//                         className="flex items-center gap-1 px-3 py-1 bg-red-100 text-red-700 rounded-lg hover:bg-red-200 transition text-sm"
//                       >
//                         <FaTrash className="text-xs" />
//                         Delete
//                       </button>
//                     </td>
//                   </tr>
//                 ))
//               ) : (
//                 <tr>
//                   <td colSpan="6" className="px-6 py-12 text-center text-gray-500">
//                     No schedules found
//                   </td>
//                 </tr>
//               )}
//             </tbody>
//           </table>
//         )}
//       </div>

//       {/* Schedule Modal */}
//       {isModalOpen && (
//         <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
//           <div className="bg-white rounded-2xl p-6 w-full max-w-6xl max-h-[90vh] overflow-y-auto shadow-xl">
//             <div className="flex justify-between items-center mb-6 pb-4 border-b">
//               <h2 className="text-2xl font-bold text-gray-800">
//                 {modalType === "day" ? "Update Schedule Availability" : "Add New Schedule"}
//               </h2>
//               <button
//                 onClick={closeModal}
//                 className="p-2 hover:bg-gray-100 rounded-lg transition"
//               >
//                 <FaTimes className="text-gray-500" />
//               </button>
//             </div>

//             {modalType === "day" && (
//                   <div className="grid grid-cols-3 gap-6">
//                 {/* Technician Section - Leftmost */}
// {/* Technician Section */}
// <div className="space-y-4">
//   <h3 className="text-lg font-semibold text-gray-700">Technicians</h3>
//   <div className="flex flex-col gap-2 max-h-[60vh] overflow-y-auto">
//     {["John Doe", "Jane Smith", "Mike Johnson"].map((tech, index) => {
//       const isSelected = selectedTechnicians.includes(tech);

//       return (
//         <button
//           key={index}
//           onClick={() => {
//             setSelectedTechnicians(prev =>
//               isSelected
//                 ? prev.filter(t => t !== tech)  // Deselect
//                 : [...prev, tech]              // Select
//             );
//           }}
//           className={`w-full text-left px-4 py-2 rounded-lg font-medium transition ${
//             isSelected
//               ? "bg-blue-600 text-white shadow-md"
//               : "bg-gray-100 text-gray-700 hover:bg-gray-200"
//           }`}
//         >
//           {tech}
//         </button>
//       );
//     })}
//   </div>
// </div>

//                 {/* Calendar Section */}
//                 <div className="space-y-4">
//                   <h3 className="text-lg font-semibold text-gray-700">Select Date(s)</h3>
                  
//                   <div className="flex items-center justify-between mb-4">
//                     <button
//                       onClick={() => navigateMonth("prev")}
//                       className="p-2 rounded-lg hover:bg-gray-100 transition"
//                     >
//                       &lt;
//                     </button>
//                     <span className="text-lg font-semibold text-gray-800">
//                       {monthYear}
//                     </span>
//                     <button
//                       onClick={() => navigateMonth("next")}
//                       className="p-2 rounded-lg hover:bg-gray-100 transition"
//                     >
//                       &gt;
//                     </button>
//                   </div>

//                   <div className="grid grid-cols-7 gap-1 mb-2">
//                     {weekDays.map((day) => (
//                       <div key={day} className="text-center text-sm font-medium text-gray-500 py-2">
//                         {day}
//                       </div>
//                     ))}
//                   </div>

//                   <div className="grid grid-cols-7 gap-1">
//                     {days.map(({ date, outside }, index) => {
//                       const isToday = moment(date).isSame(new Date(), "day");
//                       const isSelected = multipleDay
//                         ? selectedDates.some(d => moment(d).isSame(date, "day"))
//                         : selectedDate && moment(date).isSame(selectedDate, "day");
//                       const isBlocked = isDayBlocked(date);

//                       return (
//                         <button
//                           key={index}
//                           onClick={() => !outside && handleDateSelect(date)}
//                           disabled={outside}
//                           className={`
//                             aspect-square rounded-lg text-sm font-medium transition-all relative
//                             ${outside ? "text-gray-300 cursor-default" : ""}
//                             ${isBlocked ? 'bg-red-100 border border-red-300 text-red-700' : ''}
//                             ${isSelected
//                               ? isBlocked 
//                                 ? "bg-red-600 text-white shadow-md"
//                                 : "bg-blue-600 text-white shadow-md"
//                               : isToday && !outside
//                               ? "bg-blue-100 text-blue-600 font-semibold"
//                               : !outside
//                               ? "text-gray-700 hover:bg-gray-100"
//                               : ""
//                             }
//                           `}
//                         >
//                           {moment(date).date()}
//                           {isBlocked && !isSelected && (
//                             <FaBan className="absolute top-1 right-1 text-red-500 text-xs" />
//                           )}
//                         </button>
//                       );
//                     })}
//                   </div>

//                   <div className="flex items-center gap-2 pt-4">
//                     <input
//                       type="checkbox"
//                       id="multipleDay"
//                       checked={multipleDay}
//                       onChange={(e) => setMultipleDay(e.target.checked)}
//                       className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
//                     />
//                     <label htmlFor="multipleDay" className="text-sm text-gray-700">
//                       Select multiple days
//                     </label>
//                   </div>

//                   {/* Legend */}
//                   <div className="pt-4 border-t">
//                     <h4 className="text-sm font-medium text-gray-700 mb-2">Legend:</h4>
//                     <div className="flex flex-wrap gap-4 text-xs">
//                       <div className="flex items-center gap-1">
//                         <div className="w-3 h-3 bg-blue-600 rounded"></div>
//                         <span>Selected</span>
//                       </div>
//                       <div className="flex items-center gap-1">
//                         <div className="w-3 h-3 bg-red-100 border border-red-300 rounded"></div>
//                         <span>Blocked Day</span>
//                       </div>
//                       <div className="flex items-center gap-1">
//                         <div className="w-3 h-3 bg-blue-100 rounded"></div>
//                         <span>Today</span>
//                       </div>
//                     </div>
//                   </div>
//                 </div>

//                 {/* Time Selection Section */}
//                 <div className="space-y-4">
//                   <h3 className="text-lg font-semibold text-gray-700">Select Time(s)</h3>
                  
//                   <div className="flex gap-2 mb-4">
//                     <button
//                       onClick={() => setPeriod("AM")}
//                       className={`flex-1 py-2 rounded-lg font-medium transition ${
//                         period === "AM"
//                           ? "bg-blue-600 text-white"
//                           : "bg-gray-100 text-gray-600 hover:bg-gray-200"
//                       }`}
//                     >
//                       Morning (AM)
//                     </button>
//                     <button
//                       onClick={() => setPeriod("PM")}
//                       className={`flex-1 py-2 rounded-lg font-medium transition ${
//                         period === "PM"
//                           ? "bg-blue-600 text-white"
//                           : "bg-gray-100 text-gray-600 hover:bg-gray-200"
//                       }`}
//                     >
//                       Afternoon (PM)
//                     </button>
//                   </div>

//                   <div className="border rounded-lg p-4 max-h-60 overflow-y-auto">
//                     {loadingSlots ? (
//                       <div className="flex justify-center items-center py-8">
//                         <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600"></div>
//                       </div>
//                     ) : slots[period].length === 0 ? (
//                       <p className="text-gray-500 text-center py-8">
//                         No time slots available for selected period
//                       </p>
//                     ) : (
//                       <div className="grid grid-cols-2 gap-2">
//                         {slots[period].map((slot, index) => {
//                           const fullTime = `${formatTime12h(slot.startTime)} - ${formatTime12h(slot.endTime)}`;
//                           const isSelected = multipleTime
//                             ? selectedTimes.includes(fullTime)
//                             : selectedHour === fullTime;
//                           const isBlocked = !slot.isAvailable;

//                           return (
//                             <button
//                               key={index}
//                               onClick={() => handleTimeSelect(fullTime, isBlocked)}
//                               className={`
//                                 p-3 rounded-lg text-sm font-medium transition-all relative
//                                 ${isBlocked 
//                                   ? isSelected
//                                     ? 'bg-red-600 text-white shadow-md'
//                                     : 'bg-red-100 text-red-700 border border-red-300 hover:bg-red-200'
//                                   : isSelected
//                                     ? 'bg-blue-600 text-white shadow'
//                                     : 'bg-gray-50 text-gray-700 hover:bg-gray-100 border'
//                                 }
//                               `}
//                             >
//                               {fullTime}
//                               {isBlocked && !isSelected && (
//                                 <FaBan className="absolute top-2 right-2 text-red-500 text-xs" />
//                               )}
//                               {!isBlocked && isSelected && (
//                                 <FaCheckCircle className="absolute top-2 right-2 text-white text-xs" />
//                               )}
//                             </button>
//                           );
//                         })}
//                       </div>
//                     )}
//                   </div>

//                   <div className="flex items-center gap-2 pt-2">
//                     <input
//                       type="checkbox"
//                       id="multipleTime"
//                       checked={multipleTime}
//                       onChange={(e) => setMultipleTime(e.target.checked)}
//                       className="w-4 h-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
//                     />
//                     <label htmlFor="multipleTime" className="text-sm text-gray-700">
//                       Select multiple time slots
//                     </label>
//                   </div>

//                   {/* Time Legend */}
//                   <div className="pt-4 border-t">
//                     <h4 className="text-sm font-medium text-gray-700 mb-2">Time Status:</h4>
//                     <div className="flex flex-wrap gap-4 text-xs">
//                       <div className="flex items-center gap-1">
//                         <div className="w-3 h-3 bg-red-100 border border-red-300 rounded"></div>
//                         <span>Blocked Time</span>
//                       </div>
//                       <div className="flex items-center gap-1">
//                         <div className="w-3 h-3 bg-gray-50 border rounded"></div>
//                         <span>Available Time</span>
//                       </div>
//                     </div>
//                   </div>

//                   {/* Action Buttons */}
//                   <div className="grid grid-cols-2 gap-3 pt-6">
//                     <button
//                       onClick={() => handleDayOperation(true)}
//                       disabled={multipleDay ? !selectedDates.length : !selectedDate}
//                       className="flex items-center justify-center gap-2 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition"
//                     >
//                       <FaBan />
//                       Block Day
//                     </button>
                    
//                     <button
//                       onClick={() => handleDayOperation(false)}
//                       disabled={multipleDay ? !selectedDates.length : !selectedDate}
//                       className="flex items-center justify-center gap-2 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition"
//                     >
//                       <FaCheckCircle />
//                       Unblock Day
//                     </button>
                    
//                     <button
//                       onClick={() => handleTimeOperation(true)}
//                       disabled={multipleTime ? !selectedTimes.length : !selectedHour}
//                       className="flex items-center justify-center gap-2 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition"
//                     >
//                       <FaBan />
//                       Block Time
//                     </button>
                    
//                     <button
//                       onClick={() => handleTimeOperation(false)}
//                       disabled={multipleTime ? !selectedTimes.length : !selectedHour}
//                       className="flex items-center justify-center gap-2 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition"
//                     >
//                       <FaCheckCircle />
//                       Unblock Time
//                     </button>
//                   </div>
//                 </div>

//                 {/* Technician Action Buttons */}
//                   <div className="pt-4 border-t flex gap-3">
//                     <button
//                       onClick={() => handleTechnicianOperation(true)}
//                       disabled={!selectedTechnicians.length}
//                       className="flex-1 flex items-center justify-center gap-2 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition"
//                     >
//                       <FaBan /> Block Technician
//                     </button>

//                     <button
//                       onClick={() => handleTechnicianOperation(false)}
//                       disabled={!selectedTechnicians.length}
//                       className="flex-1 flex items-center justify-center gap-2 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition"
//                     >
//                       <FaCheckCircle /> Unblock Technician
//                     </button>
//                   </div>


//               </div>
//             )}



//             {modalType === "time" && (
//               <div className="py-12 text-center text-gray-500">
//                 <FaClock className="text-4xl mx-auto mb-4 text-gray-400" />
//                 <p>Time schedule management coming soon...</p>
//               </div>
//             )}

//             <div className="flex justify-end pt-6 mt-6 border-t">
//               <button
//                 onClick={closeModal}
//                 className="px-6 py-2 bg-gray-300 text-gray-700 rounded-lg hover:bg-gray-400 transition"
//               >
//                 Close
//               </button>
//             </div>
//           </div>
//         </div>
//       )}
//     </div>
//   );
// }
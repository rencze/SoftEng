1. Framework & Tools
Next.js â€“ React framework that handles routing, pages, and API calls.
Tailwind CSS â€“ for fast, responsive styling.
React Query â€“ handles data fetching, caching, and loading states.

2. Backend
Node.js with Express.js â€“ REST API backend to handle business logic.
Authentication â€“ JSON Web Token (JWT) for login/logout + protecting routes.
CORS middleware â€“ to allow frontend (Next.js) to talk to backend (Express).
Validation library (like express-validator) â€“ for clean input validation.

3. . Database
MySQL â€“ relational DB (since youâ€™ve chosen it).
mysql2 or Sequelize ORM â€“ to connect backend with database. (Start with mysql2 if you want raw SQL queries, Sequelize if you prefer ORM for easier CRUD).
Tables to Start With:
-- Drop and create database
DROP DATABASE IF EXISTS soft_eng;
CREATE DATABASE IF NOT EXISTS soft_eng;
USE soft_eng;
 
-- Roles table
CREATE TABLE roles (
    roleId INT AUTO_INCREMENT PRIMARY KEY,
    roleName VARCHAR(50) NOT NULL UNIQUE
);

-- Users table
CREATE TABLE users (
    userId INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    firstName VARCHAR(50) NULL,
    lastName VARCHAR(50) NULL,
    contactNumber VARCHAR(20) NULL,
    address VARCHAR(255) NULL,
    roleId INT DEFAULT 3,
    createdAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updatedAt TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (roleId) REFERENCES roles(roleId)
);

-- Insert roles
INSERT INTO roles (roleName)
VALUES 
    ('Technician'),
    ('Owner'),
    ('Customer');

-- Insert default users
-- Technician
INSERT INTO users (username, password, email, firstName, lastName, roleId)
VALUES ('Technician', 'tech123', 'tech@gmail.com', 'Mark', 'Reyes', 1);

-- Owner
INSERT INTO users (username, password, email, firstName, lastName, roleId)
VALUES ('Owner', 'owner', 'owner@gmail.com', 'Lawrence', 'Gonzaga', 2);

-- Customer (roleId defaults to 3)
INSERT INTO users (username, password, email, firstName, lastName)
VALUES ('Customer', 'customer', 'customer@gmail.com', 'Jane', 'Smith');

-- Verify data
SELECT * FROM roles;
SELECT * FROM users;


4. Authentication & Security
JWT â€“ for login, logout, and securing routes.
Role-based Access Control (RBAC) â€“ optional but useful if you want admin vs staff.

backend/
â”‚â”€â”€ src/
â”‚   â”œâ”€â”€ features/
â”‚   â”‚   â”œâ”€â”€ auth/
â”‚   â”‚   â”‚   â”œâ”€â”€ auth.routes.js
â”‚   â”‚   â”‚   â”œâ”€â”€ auth.controller.js
â”‚   â”‚   â”‚   â””â”€â”€ auth.model.js
â”‚   â”‚   â”‚
â”‚   â”‚   â”œâ”€â”€ users/
â”‚   â”‚   â”‚   â”œâ”€â”€ users.routes.js
â”‚   â”‚   â”‚   â”œâ”€â”€ users.controller.js
â”‚   â”‚   â”‚   â””â”€â”€ users.model.js
â”‚   â”‚   â”‚
â”‚   â”‚   â”‚
â”‚   â”‚   â””â”€â”€ ... (other modules)
â”‚   â”‚
â”‚   â”œâ”€â”€ middlewares/
â”‚   â”‚   â”œâ”€â”€ authMiddleware.js
â”‚   â”‚   â”œâ”€â”€ roleMiddleware.js
â”‚   â”‚
â”‚   â”œâ”€â”€ config/
â”‚   â”‚   â””â”€â”€ db.js
â”‚   â”‚
â”‚   â”œâ”€â”€ utils/
â”‚   â”‚   â””â”€â”€ helpers.js
â”‚   â”‚
â”‚â”€â”€app.js
â”‚â”€â”€server.js



âœ… Step 1: Initialize Project

Inside your backend folder:
npm init -y


This creates a package.json to track dependencies.

âœ… Step 2: Install Core Dependencies
Now install the backend tech stack you mentioned:
npm install express cors  jsonwebtoken express-validator dotenv

express â†’ your backend framework
cors â†’ allows frontend (Next.js) to connect to backend
jsonwebtoken (JWT) â†’ authentication system
express-validator â†’ input validation (clean request body checking)
dotenv â†’ load environment variables (secrets, db config, JWT key)

âœ… Step 3: Install Dev Dependencies (optional but recommended)
npm install --save-dev nodemon

nodemon restarts the server automatically whenever you save changes.

âœ… Step 4: Setup Scripts in package.json
In package.json, add this inside "scripts":

"scripts": {
  "start": "node server.js",
  "dev": "nodemon server.js"
}
Now you can run:
npm run dev

âœ… Step 5: Create Base Files
server.js â†’ entry point
.env â†’ environment variables (like PORT, JWT_SECRET)
/src/config/db.js â†’ database connection (if using MySQL/Postgres later)
/src/features/auth/ â†’ auth routes, controllers, etc.

ðŸ‘‰ Order of setup after installation:
Basic Express server (Hello World API)
CORS middleware setup
Authentication (JWT) â€” register, login routes
bcrypt hashing for passwords
Protected routes with JWT middleware
Validation (express-validator) for clean inputs